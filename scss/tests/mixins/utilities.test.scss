$utilities: (
  "flex": (
    responsive: true,
    property: flex,
    values: (fill: 1 1 auto)
  ),
  "align": (
    property: vertical-align,
    class: align,
    values: baseline top middle bottom text-bottom text-top
  ),
);

@import '../../mixins/_utilities';

@include describe('utilities') {

  @include describe('utilities-get-options') {

    @include it('Returns the options for the given utility') {
      @include assert-equal(
        utilities-get-options('flex'),
        (
          responsive: true,
          property: flex,
          values: (fill: 1 1 auto)
        ))
    }

    @include it('Return null if the utility does not exist') {
      @include assert-equal(
        utilities-get-options('non-existing'),
        null
      )
    }
  }

  @include describe('utilities-get-option') {
    @include it('Returns the option for the given utility') {
      @include assert-equal(
        utilities-get-option(flex, responsive),
        true
      )
    }

    @include it('Returns null if the option is not present') {
      @include assert-equal(
        utilities-get-option(flex, non-existing),
        null
      )
    }

    @include it('Returns null if the utility is not present') {
      @include assert-equal(
        utilities-get-option(non-existing, responsive),
        null
      )
    }
  }

  @include describe('utilities-get-value') {
    @include describe('utilities with map of values') {
      @include it('Returns the value for the given utility') {
        @include assert-equal(
          utilities-get-value(flex, fill),
          1 1 auto
        )
      }

      @include it('Returns null if the value does not exist for the utility') {
        @include assert-equal(
          utilities-get-value(flex, non-existing),
          null
        )
      }
    }

    @include describe('utilities with list of values') {
      @include it('Returns the value if it is in the list') {
        @include assert-equal(
          utilities-get-value(align, top),
          top
        )
      }

      @include it('Returns null if the value is not in the list') {
        @include assert-equal(
          utilities-get-value(align, non-existing),
          null
        )
      }
    }
  }

  @include describe('utilities-set-options') {
    @include it('Merges the options with the existing ones') {
      @include utilities-set-options(flex, (
        responsive: false,
        rtl: true
      ));

      @include assert-equal(utilities-get-option(flex, responsive), false, 'responsive');
      @include assert-equal(utilities-get-option(flex, rtl), true, 'rtl');
    }

    @include it('Creates the options if none exist') {

      @include assert-equal(utilities-get-option(unknown, responsive), null);

      @include utilities-set-options(unknown, (
        responsive: true
      ));

      @include assert-equal(utilities-get-option(unknown, responsive), true);
    };

    @include describe('$merge: false') {
      @include it('Completely replaces the options') {
        @include utilities-set-options(flex, (
          values: auto none
        ), $merge: false);

        @include assert-equal(utilities-get-options(flex), (
          values: auto none
        ))
      }
    }
  }

  @include describe('utilities-set-option') {
    @include it('sets a specific option for the utility') {
      @include utilities-set-option(flex, responsive, false);

      @include assert-equal(utilities-get-option(flex, responsive), false)
    }
  }
}
